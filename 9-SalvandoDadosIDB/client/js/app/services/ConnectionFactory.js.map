{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStore","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAU;;AAE/B,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,EAAhB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAc;AAAA;;AAEV,kBAAM,IAAIC,KAAJ,CAAW,sDAAX,CAAN;AACH;;AALL;AAAA;AAAA,4CAO2B;;AAEnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;;AAE/Bd,0CAAkBe,YAAlB,CAA+BC,EAAEC,MAAF,CAASC,MAAxC;AACH,qBAHD;;AAKAR,gCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,4BAAG,CAACf,UAAJ,EACAA,aAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,gCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,mCAAWC,KAAX,GAAmB,YAAW;AAC1B,kCAAM,IAAK,4CAAL,EAAN;AACH,yBAFD;;AAIAG,gCAAQJ,UAAR;AACH,qBAVD;;AAYAM,gCAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAJD;AAKH,iBA1BM,CAAP;AA2BH;AApCL;AAAA;AAAA,yCAsCyBrB,UAtCzB,EAsCqC;;AAE7BH,uBAAOyB,OAAP,CAAe,iBAAS;;AAEpB,wBAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgDzB,WAAW0B,iBAAX,CAA6BD,KAA7B;;AAEhDzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,iBALD;AAMH;AA9CL;AAAA;AAAA,8CAgD6B;;AAErB,oBAAG5B,UAAH,EAAe;AACXC;AACAD,iCAAa,IAAb;AACH;AACJ;AAtDL;;AAAA;AAAA;AAwDH,CAjEuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function(){\n\n    const stores = ['negociacoes'];\n    const version = 12;\n    const dbName = 'aluraframe'\n    \n    var connection = null;\n    var close = null;\n\n    return class ConnectionFactory {\n\n        constructor() {\n\n            throw new Error ('Não é possível criar instâncias de ConnectionFactory');\n        }\n\n        static getConnection() {\n            \n            return new Promise((resolve, reject) => { \n\n                let openRequest = window.indexedDB.open(dbName, version);\n\n                openRequest.onupgradeneeded = e => {\n\n                    ConnectionFactory._createStore(e.target.result);\n                };\n\n                openRequest.onsuccess = e => {\n\n                    if(!connection)\n                    connection = e.target.result;\n                    close = connection.close.bind(connection);\n                    connection.close = function() {\n                        throw new ('Você não pode fechar diretamente a conexão');\n                    }\n\n                    resolve(connection);\n                };\n\n                openRequest.onerror = e => {\n\n                    console.log(e.target.error);\n                    reject(e.target.error.name);\n                };\n            });\n        }\n\n        static _createStore (connection) {\n\n            stores.forEach(store => {\n\n                if(connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n\n                connection.createObjectStore(store, { autoIncrement: true});\n            });\n        }\n\n        static closeConnection() {\n\n            if(connection) {\n                close();\n                connection = null;\n            }\n        }\n    }\n})();"]}