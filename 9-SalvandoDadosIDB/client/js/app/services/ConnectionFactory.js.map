{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStore","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAUA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,E;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AAEV,0BAAM,IAAIC,KAAJ,CAAW,sDAAX,CAAN;AACH;;;;oDAEsB;;AAEnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;;AAE/BT,kDAAkBU,YAAlB,CAA+BC,EAAEC,MAAF,CAASC,MAAxC;AACH,6BAHD;;AAKAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oCAAG,CAAChB,UAAJ,EACAA,aAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,wCAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,2CAAWC,KAAX,GAAmB,YAAW;AAC1B,0CAAM,IAAK,4CAAL,EAAN;AACH,iCAFD;;AAIAI,wCAAQL,UAAR;AACH,6BAVD;;AAYAO,wCAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BAJD;AAKH,yBA1BM,CAAP;AA2BH;;;iDAEoBtB,U,EAAY;;AAE7BH,+BAAO0B,OAAP,CAAe,iBAAS;;AAEpB,gCAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgD1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEhD1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,yBALD;AAMH;;;sDAEwB;;AAErB,4BAAG7B,UAAH,EAAe;AACXC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["    const stores = ['negociacoes'];\n    const version = 12;\n    const dbName = 'aluraframe'\n    \n    let connection = null;\n    let close = null;\n\n    export class ConnectionFactory {\n\n        constructor() {\n\n            throw new Error ('Não é possível criar instâncias de ConnectionFactory');\n        }\n\n        static getConnection() {\n            \n            return new Promise((resolve, reject) => { \n\n                let openRequest = window.indexedDB.open(dbName, version);\n\n                openRequest.onupgradeneeded = e => {\n\n                    ConnectionFactory._createStore(e.target.result);\n                };\n\n                openRequest.onsuccess = e => {\n\n                    if(!connection)\n                    connection = e.target.result;\n                    close = connection.close.bind(connection);\n                    connection.close = function() {\n                        throw new ('Você não pode fechar diretamente a conexão');\n                    }\n\n                    resolve(connection);\n                };\n\n                openRequest.onerror = e => {\n\n                    console.log(e.target.error);\n                    reject(e.target.error.name);\n                };\n            });\n        }\n\n        static _createStore (connection) {\n\n            stores.forEach(store => {\n\n                if(connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n\n                connection.createObjectStore(store, { autoIncrement: true});\n            });\n        }\n\n        static closeConnection() {\n\n            if(connection) {\n                close();\n                connection = null;\n            }\n        }\n    }"]}