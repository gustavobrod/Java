{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStore","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;AAAI,IAAMA,SAAS,CAAC,aAAD,CAAf;AACA,IAAMC,UAAU,EAAhB;AACA,IAAMC,SAAS,YAAf;;AAEA,IAAIC,aAAa,IAAjB;AACA,IAAIC,QAAQ,IAAZ;;IAEaC,iB,WAAAA,iB;AAET,iCAAc;AAAA;;AAEV,cAAM,IAAIC,KAAJ,CAAW,sDAAX,CAAN;AACH;;;;wCAEsB;;AAEnB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,4BAAYI,eAAZ,GAA8B,aAAK;;AAE/BT,sCAAkBU,YAAlB,CAA+BC,EAAEC,MAAF,CAASC,MAAxC;AACH,iBAHD;;AAKAR,4BAAYS,SAAZ,GAAwB,aAAK;;AAEzB,wBAAG,CAAChB,UAAJ,EACAA,aAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4BAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+BAAWC,KAAX,GAAmB,YAAW;AAC1B,8BAAM,IAAK,4CAAL,EAAN;AACH,qBAFD;;AAIAI,4BAAQL,UAAR;AACH,iBAVD;;AAYAO,4BAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,4BAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,2BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,iBAJD;AAKH,aA1BM,CAAP;AA2BH;;;qCAEoBtB,U,EAAY;;AAE7BH,mBAAO0B,OAAP,CAAe,iBAAS;;AAEpB,oBAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgD1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEhD1B,2BAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,aALD;AAMH;;;0CAEwB;;AAErB,gBAAG7B,UAAH,EAAe;AACXC;AACAD,6BAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["    const stores = ['negociacoes'];\n    const version = 12;\n    const dbName = 'aluraframe'\n    \n    let connection = null;\n    let close = null;\n\n    export class ConnectionFactory {\n\n        constructor() {\n\n            throw new Error ('Não é possível criar instâncias de ConnectionFactory');\n        }\n\n        static getConnection() {\n            \n            return new Promise((resolve, reject) => { \n\n                let openRequest = window.indexedDB.open(dbName, version);\n\n                openRequest.onupgradeneeded = e => {\n\n                    ConnectionFactory._createStore(e.target.result);\n                };\n\n                openRequest.onsuccess = e => {\n\n                    if(!connection)\n                    connection = e.target.result;\n                    close = connection.close.bind(connection);\n                    connection.close = function() {\n                        throw new ('Você não pode fechar diretamente a conexão');\n                    }\n\n                    resolve(connection);\n                };\n\n                openRequest.onerror = e => {\n\n                    console.log(e.target.error);\n                    reject(e.target.error.name);\n                };\n            });\n        }\n\n        static _createStore (connection) {\n\n            stores.forEach(store => {\n\n                if(connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\n\n                connection.createObjectStore(store, { autoIncrement: true});\n            });\n        }\n\n        static closeConnection() {\n\n            if(connection) {\n                close();\n                connection = null;\n            }\n        }\n    }"]}